```{r}
library(matlib)
library(MASS)
library(betareg)
library(rBeta2009)
set.seed(50)
alpha=0.5
beta=1
n=50
p=8
rho=0.99
K=0.9
d=0.8
Phi=25
x1=rbeta(n,alpha,beta)
x2=rbeta(n,alpha,beta)
x3=rbeta(n,alpha,beta)
x4=rbeta(n,alpha,beta)
x5=rbeta(n,alpha,beta)0
x6=rbeta(n,alpha,beta)
x7=rbeta(n,alpha,beta)
x8=rbeta(n,alpha,beta)
a=((1-(rho)^2)^(1/2))
X1=a*x1+(rho*x4)
X2=a*x2+(rho*x4)
X3=a*x3+(rho*x4)
X4=a*x4+(rho*x4)
X5=a*x5+(rho*x4)
X6=a*x6+(rho*x4)
X7=a*x7+(rho*x4)
X8=a*x8+(rho*x4)
data=data.frame(X1,X2,X3,X4,X5,X6,X7,X8)
X=data.matrix(data)
Xt=t(X)
A=Xt%*%X
eigen(A)
ev <- eigen(A)
# extract components
B=ev$vectors[,1]
B1=B[1]
B2=B[2]
B3=B[3]
B4=B[4]
B5=B[5]
B6=B[6]
B7=B[7]
B8=B[8]
Bt=t(B)
proof=Bt%*%B # must equal 1
proof
Y=(B1^2*X1)+(B2^2*X2)+(B3^2*X3)+(B4^2*X4)+(B5^2*X5)+(B7^2*X7)+(B8^2*X8)
dart=data.frame(Y,X1,X2,X3,X4,X5,X6,X7,X8)
#MLE estimator
# extract components
lambda=ev$values
lambda1=lambda[1]   
lambda2=lambda[2] 
lambda3=lambda[3]  
lambda4=lambda[4]
lambda5=lambda[5]
lambda6=lambda[6]
lambda7=lambda[7]
lambda8=lambda[8]
k=0
c11=lambda1/(lambda1+k)^2
c22=lambda2/(lambda2+k)^2
c33=lambda3/(lambda3+k)^2
c44=lambda4/(lambda4+k)^2
c55=lambda5/(lambda5+k)^2
c66=lambda6/(lambda6+k)^2
c77=lambda7/(lambda7+k)^2
c88=lambda8/(lambda8+k)^2
c1c=c11+c22+c33+c44+c55+c66+c77+c88
C11=((k^2)*(B1^2))/(lambda1+k)^2
C22=((k^2)*(B2^2))/(lambda2+k)^2
C33=((k^2)*(B3^2))/(lambda3+k)^2
C44=((k^2)*(B4^2))/(lambda4+k)^2
C55=((k^2)*(B5^2))/(lambda5+k)^2
C66=((k^2)*(B6^2))/(lambda6+k)^2
C77=((k^2)*(B7^2))/(lambda7+k)^2
C88=((k^2)*(B8^2))/(lambda8+k)^2
C1C=C11+C22+C33+C44+C55+C66+C77+C88
C1c=c1c+C1C
MLE=Phi*C1c
# BRR Estimator
c1=lambda1/(lambda1+K)^2
c2=lambda2/(lambda2+K)^2
c3=lambda3/(lambda3+K)^2
c4=lambda4/(lambda4+K)^2
c5=lambda5/(lambda5+K)^2
c6=lambda6/(lambda6+K)^2
c7=lambda7/(lambda7+K)^2
c8=lambda8/(lambda8+K)^2
c=c1+c2+c3+c4+c5+c6+c7+c8
C1=((K^2)*(B1^2))/(lambda1+K)^2
C2=((K^2)*(B2^2))/(lambda2+K)^2
C3=((K^2)*(B3^2))/(lambda3+K)^2
C4=((K^2)*(B4^2))/(lambda4+K)^2
C5=((K^2)*(B5^2))/(lambda5+K)^2
C6=((K^2)*(B6^2))/(lambda6+K)^2
C7=((K^2)*(B7^2))/(lambda7+K)^2
C8=((K^2)*(B8^2))/(lambda8+K)^2
C=C1+C2+C3+C4+C5+C6+C7+C8
Cc=c+C
BRR=Phi*Cc
# BRT Estimator
KK=(K*(1+d))
cc1=lambda1/(lambda1+KK)^2
cc2=lambda2/(lambda2+KK)^2
cc3=lambda3/(lambda3+KK)^2
cc4=lambda4/(lambda4+KK)^2
cc5=lambda5/(lambda5+KK)^2
cc6=lambda6/(lambda6+KK)^2
cc7=lambda7/(lambda7+KK)^2
cc8=lambda8/(lambda8+KK)^2
cc=cc1+cc2+cc3+cc4+cc5+cc6+cc7+cc8
CC1=((KK^2)*(B1^2))/(lambda1+KK)^2
CC2=((KK^2)*(B2^2))/(lambda2+KK)^2
CC3=((KK^2)*(B3^2))/(lambda3+KK)^2
CC4=((KK^2)*(B4^2))/(lambda4+KK)^2
CC5=((KK^2)*(B5^2))/(lambda5+KK)^2
CC6=((KK^2)*(B6^2))/(lambda6+KK)^2
CC7=((KK^2)*(B7^2))/(lambda7+KK)^2
CC8=((KK^2)*(B8^2))/(lambda8+KK)^2
CC=CC1+CC2+CC3+CC4+CC5+CC6+CC7+CC8
CCcc=cc+CC
BRT=Phi*CCcc
Phi
MLE
BRR
BRT
```